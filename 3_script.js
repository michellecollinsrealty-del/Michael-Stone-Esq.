// Tabs for pricing panes
document.querySelectorAll('.tab').forEach(btn=>{
  btn?.addEventListener('click', ()=>{
    document.querySelectorAll('.tab').forEach(b=>b.classList.remove('active'));
    document.querySelectorAll('.tabpane').forEach(p=>p.classList.remove('active'));
    btn.classList.add('active');
    const t = document.getElementById(btn.dataset.target);
    if (t) t.classList.add('active');
  });
});
// SW + year
if('serviceWorker' in navigator){window.addEventListener('load',()=>navigator.serviceWorker.register('5_sw.js').catch(()=>{}));}
const yEl=document.getElementById('y'); if(yEl){yEl.textContent=new Date().getFullYear();}

// Smart Intake: simple doc generator
function genDoc(name, content){
  const blob = new Blob([`<html><meta charset='utf-8'><body>${content}</body></html>`], {type:'application/msword'});
  const a = document.createElement('a');
  a.href = URL.createObjectURL(blob);
  a.download = name.endsWith('.doc')?name:(name+'.doc');
  a.click();
}

// Arbitration form
const arb = document.getElementById('arbForm');
if(arb){
  arb.addEventListener('submit', e=>{
    e.preventDefault();
    const d = Object.fromEntries(new FormData(arb).entries());
    const html = `<h2>Arbitration Demand</h2>
    <p><strong>Claimant:</strong> ${d.claimant}</p>
    <p><strong>Respondent:</strong> ${d.respondent}</p>
    <p><strong>Agreement/Contract:</strong> ${d.contract}</p>
    <p><strong>Facts:</strong> ${d.facts}</p>
    <p><strong>Relief Sought:</strong> ${d.relief}</p>
    <p><strong>Arbitration Clause:</strong> ${d.clause}</p>
    <p class='small'>Generated by Michael Stone PMA â€” Education only.</p>`;
    genDoc('Arbitration_Demand', html);
  });
}

// Lien prep form
const lien = document.getElementById('lienForm');
if(lien){
  lien.addEventListener('submit', e=>{
    e.preventDefault();
    const d = Object.fromEntries(new FormData(lien).entries());
    const html = `<h2>Lien Preparation Summary</h2>
    <p><strong>Creditor:</strong> ${d.creditor}</p>
    <p><strong>Debtor:</strong> ${d.debtor}</p>
    <p><strong>Basis (Judgment/Award/Statute):</strong> ${d.basis}</p>
    <p><strong>Property/Assets:</strong> ${d.assets}</p>
    <p><strong>Amount Owed:</strong> ${d.amount}</p>
    <p><strong>Jurisdiction:</strong> ${d.juris}</p>
    <p class='small'>Checklist only. Verify state filing rules before recording.</p>`;
    genDoc('Lien_Prep', html);
  });
}

// Administrative complaint form
const adm = document.getElementById('admForm');
if(adm){
  adm.addEventListener('submit', e=>{
    e.preventDefault();
    const d = Object.fromEntries(new FormData(adm).entries());
    const html = `<h2>Administrative Complaint</h2>
    <p><strong>Complainant:</strong> ${d.complainant}</p>
    <p><strong>Agency:</strong> ${d.agency}</p>
    <p><strong>Program/Grant:</strong> ${d.program}</p>
    <p><strong>Violation:</strong> ${d.violation}</p>
    <p><strong>Evidence Summary:</strong> ${d.evidence}</p>
    <p><strong>Requested Action:</strong> ${d.request}</p>
    <p class='small'>Submit per agency rules; retain proof of delivery.</p>`;
    genDoc('Administrative_Complaint', html);
  });
}

// Emergency incident affidavit
const emg = document.getElementById('emgForm');
if(emg){
  emg.addEventListener('submit', e=>{
    e.preventDefault();
    const d = Object.fromEntries(new FormData(emg).entries());
    const html = `<h2>Emergency Incident Declaration</h2>
    <p><strong>Name:</strong> ${d.name}</p>
    <p><strong>Date & Time:</strong> ${d.dt}</p>
    <p><strong>Location:</strong> ${d.loc}</p>
    <p><strong>Incident Type:</strong> ${d.type}</p>
    <p><strong>Description:</strong> ${d.desc}</p>
    <p><strong>Witnesses:</strong> ${d.wit}</p>
    <p class='small'>Sign before a notary if possible. Store securely.</p>`;
    genDoc('Emergency_Incident_Declaration', html);
  });
}
